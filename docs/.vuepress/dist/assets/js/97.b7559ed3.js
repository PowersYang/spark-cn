(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{298:function(e,a,r){"use strict";r.r(a);var o=r(0),t=Object(o.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"quick-start-guide"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#quick-start-guide","aria-hidden":"true"}},[e._v("#")]),e._v(" Quick Start Guide")]),e._v(" "),r("h2",{attrs:{id:"prerequisite"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prerequisite","aria-hidden":"true"}},[e._v("#")]),e._v(" Prerequisite")]),e._v(" "),r("p",[e._v("Must:")]),e._v(" "),r("ul",[r("li",[e._v("Apache Hadoop 3.1.x, YARN service enabled.")])]),e._v(" "),r("p",[e._v("Optional:")]),e._v(" "),r("ul",[r("li",[e._v("Enable YARN DNS. (When distributed training is required.)")]),e._v(" "),r("li",[e._v("Enable GPU on YARN support. (When GPU-based training is required.)")])]),e._v(" "),r("h2",{attrs:{id:"run-jobs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#run-jobs","aria-hidden":"true"}},[e._v("#")]),e._v(" Run jobs")]),e._v(" "),r("h3",{attrs:{id:"commandline-options"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commandline-options","aria-hidden":"true"}},[e._v("#")]),e._v(" Commandline options")]),e._v(" "),r("pre",[r("code",[e._v('usage: job run\n -checkpoint_path <arg>       Training output directory of the job, could\n                              be local or other FS directory. This\n                              typically includes checkpoint files and\n                              exported model\n -docker_image <arg>          Docker image name/tag\n -env <arg>                   Common environment variable of worker/ps\n -input_path <arg>            Input of the job, could be local or other FS\n                              directory\n -name <arg>                  Name of the job\n -num_ps <arg>                Number of PS tasks of the job, by default\n                              it\'s 0\n -num_workers <arg>           Numnber of worker tasks of the job, by\n                              default it\'s 1\n -ps_docker_image <arg>       Specify docker image for PS, when this is\n                              not specified, PS uses --docker_image as\n                              default.\n -ps_launch_cmd <arg>         Commandline of worker, arguments will be\n                              directly used to launch the PS\n -ps_resources <arg>          Resource of each PS, for example\n                              memory-mb=2048,vcores=2,yarn.io/gpu=2\n -queue <arg>                 Name of queue to run the job, by default it\n                              uses default queue\n -saved_model_path <arg>      Model exported path (savedmodel) of the job,\n                              which is needed when exported model is not\n                              placed under ${checkpoint_path}could be\n                              local or other FS directory. This will be\n                              used to serve.\n -tensorboard <arg>           Should we run TensorBoard for this job? By\n                              default it\'s true\n -verbose                     Print verbose log for troubleshooting\n -wait_job_finish             Specified when user want to wait the job\n                              finish\n -worker_docker_image <arg>   Specify docker image for WORKER, when this\n                              is not specified, WORKER uses --docker_image\n                              as default.\n -worker_launch_cmd <arg>     Commandline of worker, arguments will be\n                              directly used to launch the worker\n -worker_resources <arg>      Resource of each worker, for example\n                              memory-mb=2048,vcores=2,yarn.io/gpu=2\n -localization <arg>          Specify localization to remote/local\n                              file/directory available to all container(Docker).\n                              Argument format is "RemoteUri:LocalFilePath[:rw]"\n                              (ro permission is not supported yet).\n                              The RemoteUri can be a file or directory in local\n                              or HDFS or s3 or abfs or http .etc.\n                              The LocalFilePath can be absolute or relative.\n                              If relative, it\'ll be under container\'s implied\n                              working directory.\n                              This option can be set mutiple times.\n                              Examples are\n                              -localization "hdfs:///user/yarn/mydir2:/opt/data"\n                              -localization "s3a:///a/b/myfile1:./"\n                              -localization "https:///a/b/myfile2:./myfile"\n                              -localization "/user/yarn/mydir3:/opt/mydir3"\n                              -localization "./mydir1:."\n')])]),e._v(" "),r("h4",{attrs:{id:"notes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#notes","aria-hidden":"true"}},[e._v("#")]),e._v(" Notes:")]),e._v(" "),r("p",[e._v("When using localization option to make a collection of dependency Python scripts available to entry python script in the container, you may also need to set PYTHONPATH environment variable as below to avoid module import error reported from entry_script.py.")]),e._v(" "),r("pre",[r("code",[e._v('... job run\n  # the entry point\n  --localization entry_script.py:<path>/entry_script.py\n  # the dependency Python scripts of the entry point\n  --localization other_scripts_dir:<path>/other_scripts_dir\n  # the PYTHONPATH env to make dependency available to entry script\n  --env PYTHONPATH="<path>/other_scripts_dir"\n  --worker_launch_cmd "python <path>/entry_script.py ..."\n')])]),e._v(" "),r("h3",{attrs:{id:"submarine-configuration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#submarine-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Submarine Configuration")]),e._v(" "),r("p",[e._v("For submarine internal configuration, please create a submarine.xml which should be placed under $HADOOP_CONF_DIR.")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("Configuration Name")]),e._v(" "),r("th",[e._v("Description")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("submarine.runtime.class")]),e._v(" "),r("td",[e._v("Optional. Full qualified class name for your runtime factory.")])]),e._v(" "),r("tr",[r("td",[e._v("submarine.localization.max-allowed-file-size-mb")]),e._v(" "),r("td",[e._v("Optional. This sets a size limit to the file/directory to be localized in “-localization” CLI option. 2GB by default.")])])])]),e._v(" "),r("h3",{attrs:{id:"launch-standalone-tensorflow-application"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#launch-standalone-tensorflow-application","aria-hidden":"true"}},[e._v("#")]),e._v(" Launch Standalone Tensorflow Application:")]),e._v(" "),r("h4",{attrs:{id:"commandline"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commandline","aria-hidden":"true"}},[e._v("#")]),e._v(" Commandline")]),e._v(" "),r("pre",[r("code",[e._v('yarn jar path-to/hadoop-yarn-applications-submarine-3.2.0-SNAPSHOT.jar job run \\\n  --env DOCKER_JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/ \\\n  --env DOCKER_HADOOP_HDFS_HOME=/hadoop-3.1.0 --name tf-job-001 \\\n  --docker_image <your-docker-image> \\\n  --input_path hdfs://default/dataset/cifar-10-data  \\\n  --checkpoint_path hdfs://default/tmp/cifar-10-jobdir \\\n  --worker_resources memory=4G,vcores=2,gpu=2  \\\n  --worker_launch_cmd "python ... (Your training application cmd)" \\\n  --tensorboard # this will launch a companion tensorboard container for monitoring\n')])]),e._v(" "),r("h4",{attrs:{id:"notes-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#notes-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Notes:")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("DOCKER_JAVA_HOME points to JAVA_HOME inside Docker image.")])]),e._v(" "),r("li",[r("p",[e._v("DOCKER_HADOOP_HDFS_HOME points to HADOOP_HDFS_HOME inside Docker image.")])]),e._v(" "),r("li",[r("p",[e._v("--worker_resources can include gpu when you need GPU to train your task.")])]),e._v(" "),r("li",[r("p",[e._v("When --tensorboard is specified, you can go to YARN new UI, go to services -> "),r("you",{attrs:{specified:"",service:""}},[e._v(" -> Click ... to access Tensorboard.")])],1)])]),e._v(" "),r("p",[e._v("This will launch a Tensorboard to monitor all your jobs. By access YARN UI (the new UI). You can go to services page, go to the tensorboard-service, click quick links (Tensorboard) can lead you to the tensorboard.")]),e._v(" "),r("p",[e._v("See below screenshot:")]),e._v(" "),r("img",{attrs:{src:"/images/tensorboard-service.png",alt:"alt text"}}),e._v(" "),r("h3",{attrs:{id:"launch-distributed-tensorflow-application"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#launch-distributed-tensorflow-application","aria-hidden":"true"}},[e._v("#")]),e._v(" Launch Distributed Tensorflow Application:")]),e._v(" "),r("h4",{attrs:{id:"commandline-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#commandline-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Commandline")]),e._v(" "),r("pre",[r("code",[e._v('yarn jar hadoop-yarn-applications-submarine-<version>.jar job run \\\n --name tf-job-001 --docker_image <your docker image> \\\n --input_path hdfs://default/dataset/cifar-10-data \\\n --checkpoint_path hdfs://default/tmp/cifar-10-jobdir \\\n --env DOCKER_JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/ \\\n --env DOCKER_HADOOP_HDFS_HOME=/hadoop-3.1.0 \\\n --num_workers 2 \\\n --worker_resources memory=8G,vcores=2,gpu=1 --worker_launch_cmd "cmd for worker ..." \\\n --num_ps 2 \\\n --ps_resources memory=4G,vcores=2,gpu=0 --ps_launch_cmd "cmd for ps" \\\n')])]),e._v(" "),r("h4",{attrs:{id:"notes-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#notes-3","aria-hidden":"true"}},[e._v("#")]),e._v(" Notes:")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("Very similar to standalone TF application, but you need to specify #worker/#ps")])]),e._v(" "),r("li",[r("p",[e._v("Different resources can be specified for worker and PS.")])]),e._v(" "),r("li",[r("p",[e._v("TF_CONFIG environment will be auto generated and set before executing user’s launch command.")])])]),e._v(" "),r("h2",{attrs:{id:"get-job-history-logs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get-job-history-logs","aria-hidden":"true"}},[e._v("#")]),e._v(" Get job history / logs")]),e._v(" "),r("h3",{attrs:{id:"get-job-status-from-cli"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get-job-status-from-cli","aria-hidden":"true"}},[e._v("#")]),e._v(" Get Job Status from CLI")]),e._v(" "),r("pre",[r("code",[e._v("yarn jar hadoop-yarn-applications-submarine-3.2.0-SNAPSHOT.jar job show --name tf-job-001\n")])]),e._v(" "),r("p",[e._v("Output looks like:")]),e._v(" "),r("pre",[r("code",[e._v("Job Meta Info:\n\tApplication Id: application_1532131617202_0005\n\tInput Path: hdfs://default/dataset/cifar-10-data\n\tCheckpoint Path: hdfs://default/tmp/cifar-10-jobdir\n\tRun Parameters: --name tf-job-001 --docker_image wtan/tf-1.8.0-gpu:0.0.3\n\t                (... all your commandline before run the job)\n")])]),e._v(" "),r("p",[e._v("After that, you can run tensorboard --logdir="),r("checkpoint-path",[e._v(" to view Tensorboard of the job.")])],1),e._v(" "),r("h3",{attrs:{id:"run-tensorboard-to-monitor-your-jobs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#run-tensorboard-to-monitor-your-jobs","aria-hidden":"true"}},[e._v("#")]),e._v(" Run tensorboard to monitor your jobs")]),e._v(" "),r("pre",[r("code",[e._v("# Cleanup previous service if needed\nyarn app -destroy tensorboard-service; \\\nyarn jar /tmp/hadoop-yarn-applications-submarine-3.2.0-SNAPSHOT.jar \\\n  job run --name tensorboard-service --verbose --docker_image wtan/tf-1.8.0-cpu:0.0.3 \\\n  --env DOCKER_JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/ \\\n  --env DOCKER_HADOOP_HDFS_HOME=/hadoop-3.1.0 \\\n  --num_workers 0 --tensorboard\n")])]),e._v(" "),r("p",[e._v("You can view multiple job training history like from the Tensorboard link:")]),e._v(" "),r("img",{attrs:{src:"/images/multiple-tensorboard-jobs.png",alt:"alt text"}}),e._v(" "),r("h3",{attrs:{id:"get-component-logs-from-a-training-job"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#get-component-logs-from-a-training-job","aria-hidden":"true"}},[e._v("#")]),e._v(" Get component logs from a training job")]),e._v(" "),r("p",[e._v("There’re two ways to get training job logs, one is from YARN UI (new or old):")]),e._v(" "),r("img",{attrs:{src:"/images/job-logs-ui.png",alt:"alt text"}}),e._v(" "),r("p",[e._v("Or you can use yarn logs -applicationId "),r("applicationId",[e._v(" to get logs from CLI")])],1)])}),[],!1,null,null,null);a.default=t.exports}}]);